
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\004\005" +
    "\000\002\004\005\000\002\005\006\000\002\005\006\000" +
    "\002\006\005\000\002\006\003\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\007\004\000" +
    "\002\007\004\000\002\007\003\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\010\005\000\002\010\003\000\002\011\003" +
    "\000\002\011\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\006\004\010\023\006\001\002\000\004\015" +
    "\075\001\002\000\010\002\074\004\010\023\006\001\002" +
    "\000\004\010\066\001\002\000\004\015\065\001\002\000" +
    "\004\016\012\001\002\000\010\002\uffff\004\uffff\023\uffff" +
    "\001\002\000\020\005\022\006\017\010\024\020\014\031" +
    "\020\033\015\034\021\001\002\000\010\015\ufffb\027\042" +
    "\030\041\001\002\000\004\005\064\001\002\000\014\011" +
    "\ufff7\015\ufff7\017\ufff7\027\ufff7\030\ufff7\001\002\000\012" +
    "\015\ufffc\017\027\027\031\030\030\001\002\000\006\005" +
    "\022\020\014\001\002\000\020\005\022\006\017\010\024" +
    "\020\014\031\020\033\015\034\021\001\002\000\014\011" +
    "\uffea\015\uffea\017\uffea\027\uffea\030\uffea\001\002\000\020" +
    "\007\uffe2\011\uffe2\014\uffe2\015\uffe2\017\uffe2\027\uffe2\030" +
    "\uffe2\001\002\000\004\027\036\001\002\000\020\005\022" +
    "\006\017\010\024\020\014\031\020\033\015\034\021\001" +
    "\002\000\010\011\054\027\042\030\041\001\002\000\012" +
    "\011\032\017\027\027\031\030\030\001\002\000\020\005" +
    "\022\006\017\010\024\020\014\031\020\033\015\034\021" +
    "\001\002\000\020\005\022\006\017\010\024\020\014\031" +
    "\020\033\015\034\021\001\002\000\020\005\022\006\017" +
    "\010\024\020\014\031\020\033\015\034\021\001\002\000" +
    "\014\011\uffee\015\uffee\017\uffee\027\uffee\030\uffee\001\002" +
    "\000\014\011\ufff2\015\ufff2\017\ufff2\027\ufff2\030\041\001" +
    "\002\000\014\011\ufff6\015\ufff6\017\ufff6\027\ufff6\030\030" +
    "\001\002\000\014\011\ufff5\015\ufff5\017\ufff5\027\ufff5\030" +
    "\ufff5\001\002\000\020\005\022\006\017\010\024\020\014" +
    "\031\020\033\015\034\021\001\002\000\014\011\uffe5\015" +
    "\uffe5\017\uffe5\027\uffe5\030\041\001\002\000\014\011\ufff4" +
    "\015\ufff4\017\ufff4\027\ufff4\030\030\001\002\000\020\005" +
    "\022\006\017\010\024\020\014\031\020\033\015\034\021" +
    "\001\002\000\020\005\022\006\017\010\024\020\014\031" +
    "\020\033\015\034\021\001\002\000\014\011\uffe9\015\uffe9" +
    "\017\uffe9\027\uffe9\030\041\001\002\000\014\011\ufff1\015" +
    "\ufff1\017\ufff1\027\ufff1\030\030\001\002\000\014\011\uffe6" +
    "\015\uffe6\017\uffe6\027\uffe6\030\uffe6\001\002\000\014\011" +
    "\uffe8\015\uffe8\017\uffe8\027\uffe8\030\uffe8\001\002\000\014" +
    "\011\uffef\015\uffef\017\uffef\027\uffef\030\uffef\001\002\000" +
    "\014\011\ufff0\015\ufff0\017\ufff0\027\ufff0\030\ufff0\001\002" +
    "\000\014\011\uffed\015\uffed\017\uffed\027\uffed\030\uffed\001" +
    "\002\000\006\027\042\030\041\001\002\000\014\011\ufff3" +
    "\015\ufff3\017\ufff3\027\031\030\030\001\002\000\014\011" +
    "\uffe7\015\uffe7\017\uffe7\027\uffe7\030\uffe7\001\002\000\014" +
    "\011\uffeb\015\uffeb\017\uffeb\027\042\030\041\001\002\000" +
    "\014\011\uffec\015\uffec\017\027\027\031\030\030\001\002" +
    "\000\006\007\uffe3\014\uffe3\001\002\000\006\007\062\014" +
    "\061\001\002\000\006\005\022\020\014\001\002\000\014" +
    "\011\ufff8\015\ufff8\017\ufff8\027\ufff8\030\ufff8\001\002\000" +
    "\006\007\uffe4\014\uffe4\001\002\000\020\007\uffe1\011\uffe1" +
    "\014\uffe1\015\uffe1\017\uffe1\027\uffe1\030\uffe1\001\002\000" +
    "\010\002\ufffd\004\ufffd\023\ufffd\001\002\000\020\005\022" +
    "\006\017\010\024\020\014\031\020\033\015\034\021\001" +
    "\002\000\010\011\072\027\042\030\041\001\002\000\012" +
    "\011\071\017\027\027\031\030\030\001\002\000\004\015" +
    "\ufff9\001\002\000\004\015\ufffa\001\002\000\010\002\001" +
    "\004\001\023\001\001\002\000\004\002\000\001\002\000" +
    "\010\002\ufffe\004\ufffe\023\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\073\000\012\002\004\003\010\004\003\005\006\001" +
    "\001\000\002\001\001\000\010\003\072\004\003\005\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\015\007\012\011\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\057\011\056\001\001" +
    "\000\010\006\055\007\054\011\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\025" +
    "\007\024\011\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\052\007\051\011\022\001\001\000\010" +
    "\006\050\007\047\011\022\001\001\000\010\006\033\007" +
    "\032\011\034\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\037\007" +
    "\036\011\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\046\007\045\011\022\001\001\000\010\006" +
    "\043\007\042\011\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\067\007\066" +
    "\011\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //ArrayList<ArrayList<Double>> filas = new ArrayList<>();   //no usamos en este ejercicio porque no tenemos varias filas de seguido
    ArrayList<Double> fila = new ArrayList<>();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // lineas ::= lineas linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= lineas EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lineas ::= linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // linea ::= definicion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // linea ::= funcion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // definicion ::= IDENT ASIG vector 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 TablaSimbolos.insertarVector(ident, v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definicion ::= IDENT ASIG conjunto 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] c = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 TablaSimbolos.insertarConjunto(ident, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // funcion ::= PRINT AP conjunto CP 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[] c = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Matrices.print(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= PRINT AP vector CP 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Matrices.print(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // vector ::= ALL fila CLL 
            {
              double[] RESULT =null;
		 RESULT = Matrices.toVector(fila);    fila.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // vector ::= VECTOR 
            {
              double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vector ::= vector CONCATENA vector 
            {
              double[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v2 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.concatena(v1, v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vector ::= vector CONCATENA numero 
            {
              double[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.concatena(v1, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vector ::= numero CONCATENA vector 
            {
              double[] RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v2 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.concatena(n, v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vector ::= vector MAS vector 
            {
              double[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v2 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (Matrices.dim(v1) == Matrices.dim(v2)) { RESULT = Matrices.suma(v1, v2); } else { System.out.println(Matrices.ERROR_SUMA); System.exit(-1);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vector ::= vector CONCATENA conjunto 
            {
              double[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] c1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.concatena(v1, c1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vector ::= conjunto CONCATENA vector 
            {
              double[] RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] c1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.concatena(c1, v1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vector ::= vector INTERSECCION conjunto 
            {
              double[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] c1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.interseccion(v1, c1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vector ::= conjunto INTERSECCION vector 
            {
              double[] RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] c1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.interseccion(c1, v1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vector ::= AP vector CP 
            {
              double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vector ::= vector INTERSECCION vector 
            {
              double[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v2 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.interseccion(v1, v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // conjunto ::= SET vector 
            {
              double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.toSet(v);    fila.clear();    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunto",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // conjunto ::= SET conjunto 
            {
              double[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] c = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunto",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // conjunto ::= CONJUNTO 
            {
              double[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] c = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunto",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // conjunto ::= conjunto CONCATENA conjunto 
            {
              double[] RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] c1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] c2 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.union(c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunto",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // conjunto ::= conjunto INTERSECCION conjunto 
            {
              double[] RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] c1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] c2 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.interseccion(c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunto",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // conjunto ::= AP conjunto CP 
            {
              double[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[] c = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunto",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // conjunto ::= conjunto CONCATENA numero 
            {
              double[] RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] c1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.union(c1, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunto",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // conjunto ::= numero CONCATENA conjunto 
            {
              double[] RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] c1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.union(n, c1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conjunto",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fila ::= fila COMA numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fila.add(new Double(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fila ::= numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fila.add(new Double(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // numero ::= NUMERO 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // numero ::= MENOS NUMERO 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = -a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
