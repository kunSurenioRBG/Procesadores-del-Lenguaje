
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\004\004\000\002\002\004\000\002\004" +
    "\003\000\002\005\004\000\002\005\004\000\002\002\005" +
    "\000\002\002\005\000\002\002\012\000\002\003\006\000" +
    "\002\003\006\000\002\011\005\000\002\011\003\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\006\000\002\011\006\000\002\011\006\000\002" +
    "\011\005\000\002\011\010\000\002\010\005\000\002\010" +
    "\003\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\005\000\002\006\005\000\002\006\003\000" +
    "\002\007\005\000\002\007\003\000\002\012\003\000\002" +
    "\012\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\006\004\010\023\006\001\002\000\004\015" +
    "\135\001\002\000\010\002\134\004\010\023\006\001\002" +
    "\000\004\010\126\001\002\000\004\015\125\001\002\000" +
    "\006\010\012\016\013\001\002\000\010\002\uffff\004\uffff" +
    "\023\uffff\001\002\000\004\005\117\001\002\000\026\005" +
    "\024\006\022\010\030\012\023\020\015\024\017\025\014" +
    "\026\021\030\026\031\016\001\002\000\004\010\114\001" +
    "\002\000\004\005\113\001\002\000\026\007\uffe5\011\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\017\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\027\uffe5\001\002\000\004\010\110\001\002\000\012" +
    "\015\ufffb\017\043\021\044\027\045\001\002\000\004\010" +
    "\105\001\002\000\012\005\024\006\050\020\015\031\016" +
    "\001\002\000\012\005\024\006\050\020\015\031\016\001" +
    "\002\000\026\007\uffdc\011\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\017\uffdc\020\uffdc\021\uffdc\022\uffdc\027\uffdc\001\002\000" +
    "\004\027\056\001\002\000\022\010\070\011\ufff6\015\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\027\ufff6\001\002\000" +
    "\016\015\ufffc\017\033\020\034\021\037\022\035\027\036" +
    "\001\002\000\026\005\024\006\022\010\030\012\023\020" +
    "\015\024\017\025\014\026\021\030\026\031\016\001\002" +
    "\000\010\017\043\021\044\027\045\001\002\000\016\011" +
    "\040\017\033\020\034\021\037\022\035\027\036\001\002" +
    "\000\026\005\024\006\022\010\030\012\023\020\015\024" +
    "\017\025\014\026\021\030\026\031\016\001\002\000\026" +
    "\005\024\006\022\010\030\012\023\020\015\024\017\025" +
    "\014\026\021\030\026\031\016\001\002\000\026\005\024" +
    "\006\022\010\030\012\023\020\015\024\017\025\014\026" +
    "\021\030\026\031\016\001\002\000\012\005\024\006\050" +
    "\020\015\031\016\001\002\000\026\005\024\006\022\010" +
    "\030\012\023\020\015\024\017\025\014\026\021\030\026" +
    "\031\016\001\002\000\020\011\ufff4\015\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\027\ufff4\001\002\000\020\011\ufff1" +
    "\015\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\027\045\001" +
    "\002\000\020\011\uffed\015\uffed\017\uffed\020\uffed\021\uffed" +
    "\022\uffed\027\036\001\002\000\012\005\024\006\050\020" +
    "\015\031\016\001\002\000\026\005\024\006\022\010\030" +
    "\012\023\020\015\024\017\025\014\026\021\030\026\031" +
    "\016\001\002\000\012\005\024\006\050\020\015\031\016" +
    "\001\002\000\026\007\uffe4\011\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4\027\uffe4\001\002" +
    "\000\026\007\uffe3\011\uffe3\013\uffe3\014\uffe3\015\uffe3\017" +
    "\uffe3\020\uffe3\021\uffe3\022\uffe3\027\uffe3\001\002\000\006" +
    "\005\024\020\015\001\002\000\006\007\uffdd\014\uffdd\001" +
    "\002\000\006\007\054\014\053\001\002\000\006\005\024" +
    "\020\015\001\002\000\026\007\uffe6\011\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\027\uffe6" +
    "\001\002\000\006\007\uffde\014\uffde\001\002\000\012\005" +
    "\024\006\050\020\015\031\016\001\002\000\026\007\uffe2" +
    "\011\uffe2\013\uffe2\014\uffe2\015\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\027\uffe2\001\002\000\020\011\uffe8\015\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\027\045\001\002\000" +
    "\020\011\ufff0\015\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0" +
    "\027\036\001\002\000\026\007\uffe1\011\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\027\045" +
    "\001\002\000\020\011\ufff2\015\ufff2\017\ufff2\020\ufff2\021" +
    "\ufff2\022\ufff2\027\ufff2\001\002\000\020\011\ufff3\015\ufff3" +
    "\017\ufff3\020\ufff3\021\ufff3\022\ufff3\027\ufff3\001\002\000" +
    "\020\011\uffec\015\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\027\036\001\002\000\020\011\uffee\015\uffee\017\uffee\020" +
    "\uffee\021\037\022\035\027\036\001\002\000\020\011\uffef" +
    "\015\uffef\017\uffef\020\uffef\021\037\022\035\027\036\001" +
    "\002\000\004\005\071\001\002\000\004\014\072\001\002" +
    "\000\004\005\073\001\002\000\004\011\074\001\002\000" +
    "\020\011\uffe7\015\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7" +
    "\027\uffe7\001\002\000\014\007\uffdf\013\uffdf\014\uffdf\017" +
    "\043\027\045\001\002\000\006\013\100\014\077\001\002" +
    "\000\012\005\024\006\050\020\015\031\016\001\002\000" +
    "\020\011\ufff5\015\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5" +
    "\027\ufff5\001\002\000\014\007\uffe0\013\uffe0\014\uffe0\017" +
    "\043\027\045\001\002\000\010\007\uffdd\014\uffdd\027\056" +
    "\001\002\000\006\007\104\014\077\001\002\000\020\011" +
    "\ufff7\015\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\027\ufff7" +
    "\001\002\000\026\005\024\006\022\010\030\012\023\020" +
    "\015\024\017\025\014\026\021\030\026\031\016\001\002" +
    "\000\016\011\107\017\033\020\034\021\037\022\035\027" +
    "\036\001\002\000\020\011\uffe9\015\uffe9\017\uffe9\020\uffe9" +
    "\021\uffe9\022\uffe9\027\uffe9\001\002\000\026\005\024\006" +
    "\022\010\030\012\023\020\015\024\017\025\014\026\021" +
    "\030\026\031\016\001\002\000\016\011\112\017\033\020" +
    "\034\021\037\022\035\027\036\001\002\000\020\011\uffeb" +
    "\015\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\027\uffeb\001" +
    "\002\000\026\007\uffdb\011\uffdb\013\uffdb\014\uffdb\015\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\027\uffdb\001\002\000" +
    "\026\005\024\006\022\010\030\012\023\020\015\024\017" +
    "\025\014\026\021\030\026\031\016\001\002\000\016\011" +
    "\116\017\033\020\034\021\037\022\035\027\036\001\002" +
    "\000\020\011\uffea\015\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\027\uffea\001\002\000\004\014\120\001\002\000\004" +
    "\005\121\001\002\000\004\011\122\001\002\000\004\016" +
    "\123\001\002\000\026\005\024\006\022\010\030\012\023" +
    "\020\015\024\017\025\014\026\021\030\026\031\016\001" +
    "\002\000\016\015\ufffa\017\033\020\034\021\037\022\035" +
    "\027\036\001\002\000\010\002\ufffd\004\ufffd\023\ufffd\001" +
    "\002\000\026\005\024\006\022\010\030\012\023\020\015" +
    "\024\017\025\014\026\021\030\026\031\016\001\002\000" +
    "\012\011\132\017\043\021\044\027\045\001\002\000\016" +
    "\011\131\017\033\020\034\021\037\022\035\027\036\001" +
    "\002\000\004\015\ufff9\001\002\000\004\015\ufff8\001\002" +
    "\000\010\002\001\004\001\023\001\001\002\000\004\002" +
    "\000\001\002\000\010\002\ufffe\004\ufffe\023\ufffe\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\012\002\003\003\006\004\004\005\010\001" +
    "\001\000\002\001\001\000\010\002\003\003\006\005\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\017" +
    "\011\026\012\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\102\007\051\010\074\012" +
    "\101\001\001\000\010\006\075\010\074\012\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\030\011\031\012\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\030\011" +
    "\066\012\024\001\001\000\010\010\030\011\065\012\024" +
    "\001\001\000\010\010\030\011\064\012\024\001\001\000" +
    "\006\010\063\012\062\001\001\000\010\010\040\011\041" +
    "\012\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\061\012\024\001\001\000\010" +
    "\010\057\011\060\012\024\001\001\000\006\010\045\012" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\051\012\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\056\012\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\010\100" +
    "\012\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\030\011\105\012\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\030\011\110\012\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\030\011\114\012\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\030\011\123" +
    "\012\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\126\011\127\012\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void syntax_error(Symbol cur_token){
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        System.err.println("Syntax error en linea" + Matrices.lex.getLine() + ", columna " + Matrices.lex.getColumn() + " con el token "+ sym.terminalNames[cur_token.sym]);
        // report_error("Syntax error", null);
        done_parsing();
    }




/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    ArrayList<ArrayList<Double>> filas = new ArrayList<>();
    ArrayList<Double> fila = new ArrayList<>();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // lineas ::= lineas linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= lineas EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lineas ::= linea 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lineas",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // linea ::= definicion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // linea ::= funcion PYC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("linea",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // definicion ::= IDENT ASIG matriz 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] a = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 TablaSimbolos.insertar(ident, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // definicion ::= IDENT ASIG vector 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] a = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 TablaSimbolos.insertarVector(ident, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // definicion ::= IDENT AP NUMERO COMA NUMERO CP ASIG matriz 
            {
              Object RESULT =null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                            TablaSimbolos.insertar(ident,
                                                                            Matrices.completar(m,n1.intValue(),n2.intValue()));
                                                                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("definicion",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // funcion ::= PRINT AP matriz CP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] a = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Matrices.print(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // funcion ::= PRINT AP vector CP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[] a = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Matrices.print(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // matriz ::= ALL filas CLL 
            {
              double[][] RESULT =null;
		
                                                                    try {
                                                                    RESULT = Matrices.toArray(filas);
                                                                    } catch (Exception e) {
                                                                    System.out.println(Matrices.ERROR_FILAS);
                                                                    System.exit(-1);
                                                                    }
                                                                    filas.clear();
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // matriz ::= MATRIZ 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // matriz ::= AC filas CC 
            {
              double[][] RESULT =null;
		
                                                                    try {
                                                                    RESULT = Matrices.toArray(filas);
                                                                    } catch (Exception e) {
                                                                    System.out.println(Matrices.ERROR_FILAS);
                                                                    System.exit(-1);
                                                                    }
                                                                    filas.clear();
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // matriz ::= AP matriz CP 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = m; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // matriz ::= matriz CONCATENA vector 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.concatena(m,v);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // matriz ::= matriz CONCATENA numero 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.concatena(m,n);    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // matriz ::= matriz POR vector 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.producto(m,v);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // matriz ::= vector POR matriz 
            {
              double[][] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.producto(v,m);     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // matriz ::= matriz MAS matriz 
            {
              double[][] RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                                                                    if (Matrices.filas(m1) == Matrices.filas(m2) &&
                                                                    Matrices.columnas(m1) == Matrices.columnas(m2)) {
                                                                    RESULT = Matrices.suma(m1,m2);
                                                                    } else {
                                                                    System.out.println(Matrices.ERROR_SUMA);
                                                                    System.exit(-1);
                                                                    }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // matriz ::= matriz MENOS matriz 
            {
              double[][] RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                    if (Matrices.filas(m1) == Matrices.filas(m2) &&
                                                                    Matrices.columnas(m1) == Matrices.columnas(m2)) {
                                                                    RESULT = Matrices.suma(m1, Matrices.producto(-1,
                                                                    m2));
                                                                    } else {
                                                                    System.out.println(Matrices.ERROR_SUMA);
                                                                    System.exit(-1);
                                                                    }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // matriz ::= matriz POR matriz 
            {
              double[][] RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                    if (Matrices.columnas(m1) == Matrices.filas(m2)) {
                                                                    RESULT = Matrices.producto(m1,m2);
                                                                    } else {
                                                                    System.out.println(Matrices.ERROR_PROD);
                                                                    System.exit(-1);
                                                                    }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // matriz ::= matriz DIV matriz 
            {
              double[][] RESULT =null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[][] m1 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[][] m2 = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                    if (Matrices.columnas(m1) == Matrices.filas(m2)) {
                                                                    RESULT = Matrices.producto(m1, Matrices.inversa(m2));
                                                                    } else {
                                                                    System.out.println(Matrices.ERROR_PROD);
                                                                    System.exit(-1);
                                                                    }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // matriz ::= INVERSA AP matriz CP 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                    if (Matrices.filas(m) == Matrices.columnas(m)) {
                                                                    RESULT = Matrices.inversa(m);
                                                                    } else {
                                                                    System.out.println(Matrices.ERROR_INVERSA);
                                                                    System.exit(-1);
                                                                    }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // matriz ::= TRANSPUESTA AP matriz CP 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Matrices.transpuesta(m); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // matriz ::= ADJUNTA AP matriz CP 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                    if (Matrices.filas(m) == Matrices.columnas(m)) {
                                                                    RESULT = Matrices.adjunta(m);
                                                                    } else {
                                                                    System.out.println(Matrices.ERROR_ADJUNTA);
                                                                    System.exit(-1);
                                                                    }
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // matriz ::= vector POR vector 
            {
              double[][] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v2 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.producto(v1,v2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // matriz ::= MATRIZ AP NUMERO COMA NUMERO CP 
            {
              double[][] RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		double[][] m = (double[][])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                    if (n1 > Matrices.filas(m)) {
                                                                    System.out.println(Matrices.ERROR_FILAS_INSUF);
                                                                    System.exit(-1);
                                                                    } else if (n2 > Matrices.columnas(m)) {
                                                                    System.out.println(Matrices.ERROR_COLUM_INSUF);
                                                                    System.exit(-1);
                                                                    }
                                                                    RESULT = Matrices.subMatriz(m,n1.intValue(),n2.intValue());
                                                                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("matriz",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vector ::= ALL fila CLL 
            {
              double[] RESULT =null;
		 RESULT = Matrices.toVector(fila);    fila.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vector ::= VECTOR 
            {
              double[] RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // vector ::= vector CONCATENA vector 
            {
              double[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v2 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.concatena(v1, v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vector ::= vector CONCATENA numero 
            {
              double[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.concatena(v1, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // vector ::= numero CONCATENA vector 
            {
              double[] RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v2 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Matrices.concatena(n, v2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vector ::= vector MAS vector 
            {
              double[] RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		double[] v1 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] v2 = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if (Matrices.dim(v1) == Matrices.dim(v2)) { RESULT = Matrices.suma(v1, v2); } else { System.out.println(Matrices.ERROR_SUMA); System.exit(-1);} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // filas ::= filas COMA vector 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] a = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 filas.add(Matrices.toArrayList(a));     fila.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // filas ::= vector 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		double[] a = (double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 filas.add(Matrices.toArrayList(a));     fila.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("filas",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // fila ::= fila COMA numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fila.add(new Double(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fila ::= numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 fila.add(new Double(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fila",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // numero ::= NUMERO 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // numero ::= MENOS NUMERO 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = -a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("numero",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
